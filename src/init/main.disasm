
/home/blessed/Programowanie/blessOS/ex/src/init/main.o:     file format elf32-i386


Disassembly of section .text:

00000000 <main>:
    unsigned short b;
} stack_start = { &user_stack[4096 >> 2], 0x10 };


void main(void)
{
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
    while (1)
        __asm__("nop");
   3:	90                   	nop
   4:	eb fd                	jmp    3 <main+0x3>

Disassembly of section .data:

00000000 <stack_start>:
   0:	00 10                	add    %dl,(%eax)
			0: R_386_32	user_stack
   2:	00 00                	add    %al,(%eax)
   4:	10 00                	adc    %al,(%eax)
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
    unsigned short b;
} stack_start = { &user_stack[4096 >> 2], 0x10 };


void main(void)
{
   0:	a5                   	movsl  %ds:(%esi),%es:(%edi)
   1:	00 00                	add    %al,(%eax)
    while (1)
        __asm__("nop");
   3:	00 02                	add    %al,(%edx)
   5:	00 00                	add    %al,(%eax)
			6: R_386_32	.debug_abbrev
   7:	00 00                	add    %al,(%eax)
   9:	00 04 01             	add    %al,(%ecx,%eax,1)
   c:	60                   	pusha  
			c: R_386_32	.debug_str
   d:	00 00                	add    %al,(%eax)
   f:	00 01                	add    %al,(%ecx)
  11:	13 00                	adc    (%eax),%eax
			11: R_386_32	.debug_str
  13:	00 00                	add    %al,(%eax)
  15:	00 00                	add    %al,(%eax)
			15: R_386_32	.text
  17:	00 00                	add    %al,(%eax)
  19:	06                   	push   %es
			19: R_386_32	.text
  1a:	00 00                	add    %al,(%eax)
  1c:	00 00                	add    %al,(%eax)
			1d: R_386_32	.debug_line
  1e:	00 00                	add    %al,(%eax)
  20:	00 02                	add    %al,(%edx)
  22:	08 01                	or     %al,(%ecx)
  24:	02 42 00             	add    0x0(%edx),%al
  27:	00 00                	add    %al,(%eax)
  29:	03 61 00             	add    0x0(%ecx),%esp
  2c:	01 03                	add    %eax,(%ebx)
  2e:	42                   	inc    %edx
  2f:	00 00                	add    %al,(%eax)
  31:	00 02                	add    %al,(%edx)
  33:	23 00                	and    (%eax),%eax
  35:	03 62 00             	add    0x0(%edx),%esp
  38:	01 04 4f             	add    %eax,(%edi,%ecx,2)
  3b:	00 00                	add    %al,(%eax)
  3d:	00 02                	add    %al,(%edx)
  3f:	23 04 00             	and    (%eax,%eax,1),%eax
  42:	04 04                	add    $0x4,%al
  44:	48                   	dec    %eax
  45:	00 00                	add    %al,(%eax)
  47:	00 05 04 07 53 00    	add    %al,0x530704
			4b: R_386_32	.debug_str
  4d:	00 00                	add    %al,(%eax)
  4f:	05 02 07 00 00       	add    $0x702,%eax
			52: R_386_32	.debug_str
  54:	00 00                	add    %al,(%eax)
  56:	06                   	push   %es
  57:	01 78 00             	add    %edi,0x0(%eax)
			58: R_386_32	.debug_str
  5a:	00 00                	add    %al,(%eax)
  5c:	01 08                	add    %ecx,(%eax)
  5e:	01 00                	add    %eax,(%eax)
			5f: R_386_32	.text
  60:	00 00                	add    %al,(%eax)
  62:	00 06                	add    %al,(%esi)
			63: R_386_32	.text
  64:	00 00                	add    %al,(%eax)
  66:	00 00                	add    %al,(%eax)
			67: R_386_32	.debug_loc
  68:	00 00                	add    %al,(%eax)
  6a:	00 01                	add    %al,(%ecx)
  6c:	07                   	pop    %es
  6d:	48                   	dec    %eax
  6e:	00 00                	add    %al,(%eax)
  70:	00 7d 00             	add    %bh,0x0(%ebp)
  73:	00 00                	add    %al,(%eax)
  75:	08 7d 00             	or     %bh,0x0(%ebp)
  78:	00 00                	add    %al,(%eax)
  7a:	ff 03                	incl   (%ebx)
  7c:	00 05 04 07 4a 00    	add    %al,0x4a0704
			80: R_386_32	.debug_str
  82:	00 00                	add    %al,(%eax)
  84:	09 7d 00             	or     %edi,0x0(%ebp)
			85: R_386_32	.debug_str
  87:	00 00                	add    %al,(%eax)
  89:	01 01                	add    %eax,(%ecx)
  8b:	6c                   	insb   (%dx),%es:(%edi)
  8c:	00 00                	add    %al,(%eax)
  8e:	00 01                	add    %al,(%ecx)
  90:	05 03 00 00 00       	add    $0x3,%eax
			92: R_386_32	user_stack
  95:	00 09                	add    %cl,(%ecx)
  97:	6c                   	insb   (%dx),%es:(%edi)
			97: R_386_32	.debug_str
  98:	00 00                	add    %al,(%eax)
  9a:	00 01                	add    %al,(%ecx)
  9c:	05 21 00 00 00       	add    $0x21,%eax
  a1:	01 05 03 00 00 00    	add    %eax,0x3
			a4: R_386_32	stack_start
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
    unsigned short b;
} stack_start = { &user_stack[4096 >> 2], 0x10 };


void main(void)
{
   0:	01 11                	add    %edx,(%ecx)
   2:	01 25 0e 13 0b 03    	add    %esp,0x30b130e
   8:	0e                   	push   %cs
   9:	11 01                	adc    %eax,(%ecx)
   b:	12 01                	adc    (%ecx),%al
   d:	10 06                	adc    %al,(%esi)
   f:	00 00                	add    %al,(%eax)
  11:	02 13                	add    (%ebx),%dl
  13:	01 0b                	add    %ecx,(%ebx)
  15:	0b 3a                	or     (%edx),%edi
  17:	0b 3b                	or     (%ebx),%edi
  19:	0b 01                	or     (%ecx),%eax
  1b:	13 00                	adc    (%eax),%eax
  1d:	00 03                	add    %al,(%ebx)
  1f:	0d 00 03 08 3a       	or     $0x3a080300,%eax
  24:	0b 3b                	or     (%ebx),%edi
  26:	0b 49 13             	or     0x13(%ecx),%ecx
  29:	38 0a                	cmp    %cl,(%edx)
  2b:	00 00                	add    %al,(%eax)
  2d:	04 0f                	add    $0xf,%al
  2f:	00 0b                	add    %cl,(%ebx)
  31:	0b 49 13             	or     0x13(%ecx),%ecx
  34:	00 00                	add    %al,(%eax)
  36:	05 24 00 0b 0b       	add    $0xb0b0024,%eax
  3b:	3e 0b 03             	or     %ds:(%ebx),%eax
  3e:	0e                   	push   %cs
  3f:	00 00                	add    %al,(%eax)
  41:	06                   	push   %es
  42:	2e 00 3f             	add    %bh,%cs:(%edi)
  45:	0c 03                	or     $0x3,%al
  47:	0e                   	push   %cs
  48:	3a 0b                	cmp    (%ebx),%cl
  4a:	3b 0b                	cmp    (%ebx),%ecx
  4c:	27                   	daa    
  4d:	0c 11                	or     $0x11,%al
  4f:	01 12                	add    %edx,(%edx)
  51:	01 40 06             	add    %eax,0x6(%eax)
  54:	97                   	xchg   %eax,%edi
  55:	42                   	inc    %edx
  56:	0c 00                	or     $0x0,%al
  58:	00 07                	add    %al,(%edi)
  5a:	01 01                	add    %eax,(%ecx)
  5c:	49                   	dec    %ecx
  5d:	13 01                	adc    (%ecx),%eax
  5f:	13 00                	adc    (%eax),%eax
  61:	00 08                	add    %cl,(%eax)
  63:	21 00                	and    %eax,(%eax)
  65:	49                   	dec    %ecx
  66:	13 2f                	adc    (%edi),%ebp
  68:	05 00 00 09 34       	add    $0x34090000,%eax
  6d:	00 03                	add    %al,(%ebx)
  6f:	0e                   	push   %cs
  70:	3a 0b                	cmp    (%ebx),%cl
  72:	3b 0b                	cmp    (%ebx),%ecx
  74:	49                   	dec    %ecx
  75:	13 3f                	adc    (%edi),%edi
  77:	0c 02                	or     $0x2,%al
  79:	0a 00                	or     (%eax),%al
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
   0:	00 00                	add    %al,(%eax)
   2:	00 00                	add    %al,(%eax)
    while (1)
        __asm__("nop");
   4:	01 00                	add    %eax,(%eax)
   6:	00 00                	add    %al,(%eax)
   8:	02 00                	add    (%eax),%al
   a:	74 04                	je     10 <.debug_loc+0x10>
   c:	01 00                	add    %eax,(%eax)
   e:	00 00                	add    %al,(%eax)
  10:	03 00                	add    (%eax),%eax
  12:	00 00                	add    %al,(%eax)
  14:	02 00                	add    (%eax),%al
  16:	74 08                	je     20 <.debug_loc+0x20>
  18:	03 00                	add    (%eax),%eax
  1a:	00 00                	add    %al,(%eax)
  1c:	06                   	push   %es
  1d:	00 00                	add    %al,(%eax)
  1f:	00 02                	add    %al,(%edx)
  21:	00 75 08             	add    %dh,0x8(%ebp)
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
    unsigned short b;
} stack_start = { &user_stack[4096 >> 2], 0x10 };


void main(void)
{
   0:	1c 00                	sbb    $0x0,%al
   2:	00 00                	add    %al,(%eax)
    while (1)
        __asm__("nop");
   4:	02 00                	add    (%eax),%al
   6:	00 00                	add    %al,(%eax)
			6: R_386_32	.debug_info
   8:	00 00                	add    %al,(%eax)
   a:	04 00                	add    $0x0,%al
	...
			10: R_386_32	.text
  14:	06                   	push   %es
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
    unsigned short b;
} stack_start = { &user_stack[4096 >> 2], 0x10 };


void main(void)
{
   0:	65 00 00             	add    %al,%gs:(%eax)
    while (1)
        __asm__("nop");
   3:	00 02                	add    %al,(%edx)
   5:	00 4d 00             	add    %cl,0x0(%ebp)
   8:	00 00                	add    %al,(%eax)
   a:	01 01                	add    %eax,(%ecx)
   c:	fb                   	sti    
   d:	0e                   	push   %cs
   e:	0d 00 01 01 01       	or     $0x1010100,%eax
  13:	01 00                	add    %eax,(%eax)
  15:	00 00                	add    %al,(%eax)
  17:	01 00                	add    %eax,(%eax)
  19:	00 01                	add    %al,(%ecx)
  1b:	2f                   	das    
  1c:	68 6f 6d 65 2f       	push   $0x2f656d6f
  21:	62 6c 65 73          	bound  %ebp,0x73(%ebp,%eiz,2)
  25:	73 65                	jae    8c <main+0x8c>
  27:	64                   	fs
  28:	2f                   	das    
  29:	50                   	push   %eax
  2a:	72 6f                	jb     9b <main+0x9b>
  2c:	67 72 61             	addr16 jb 90 <main+0x90>
  2f:	6d                   	insl   (%dx),%es:(%edi)
  30:	6f                   	outsl  %ds:(%esi),(%dx)
  31:	77 61                	ja     94 <main+0x94>
  33:	6e                   	outsb  %ds:(%esi),(%dx)
  34:	69 65 2f 62 6c 65 73 	imul   $0x73656c62,0x2f(%ebp),%esp
  3b:	73 4f                	jae    8c <main+0x8c>
  3d:	53                   	push   %ebx
  3e:	2f                   	das    
  3f:	65                   	gs
  40:	78 2f                	js     71 <main+0x71>
  42:	73 72                	jae    b6 <main+0xb6>
  44:	63 2f                	arpl   %bp,(%edi)
  46:	69 6e 69 74 00 00 6d 	imul   $0x6d000074,0x69(%esi),%ebp
  4d:	61                   	popa   
  4e:	69 6e 2e 63 00 01 00 	imul   $0x10063,0x2e(%esi),%ebp
  55:	00 00                	add    %al,(%eax)
  57:	00 05 02 00 00 00    	add    %al,0x2
			5a: R_386_32	.text
  5d:	00 1a                	add    %bl,(%edx)
  5f:	00 02                	add    %al,(%edx)
  61:	04 01                	add    $0x1,%al
  63:	3e 02 03             	add    %ds:(%ebx),%al
  66:	00 01                	add    %al,(%ecx)
  68:	01                   	.byte 0x1

Disassembly of section .debug_str:

00000000 <.debug_str>:
    unsigned short b;
} stack_start = { &user_stack[4096 >> 2], 0x10 };


void main(void)
{
   0:	73 68                	jae    6a <.debug_str+0x6a>
   2:	6f                   	outsl  %ds:(%esi),(%dx)
    while (1)
        __asm__("nop");
   3:	72 74                	jb     79 <.debug_str+0x79>
   5:	20 75 6e             	and    %dh,0x6e(%ebp)
   8:	73 69                	jae    73 <.debug_str+0x73>
   a:	67 6e                	outsb  %ds:(%si),(%dx)
   c:	65 64 20 69 6e       	gs and %ch,%fs:%gs:0x6e(%ecx)
  11:	74 00                	je     13 <.debug_str+0x13>
  13:	2f                   	das    
  14:	68 6f 6d 65 2f       	push   $0x2f656d6f
  19:	62 6c 65 73          	bound  %ebp,0x73(%ebp,%eiz,2)
  1d:	73 65                	jae    84 <.debug_str+0x84>
  1f:	64                   	fs
  20:	2f                   	das    
  21:	50                   	push   %eax
  22:	72 6f                	jb     93 <main+0x93>
  24:	67 72 61             	addr16 jb 88 <main+0x88>
  27:	6d                   	insl   (%dx),%es:(%edi)
  28:	6f                   	outsl  %ds:(%esi),(%dx)
  29:	77 61                	ja     8c <main+0x8c>
  2b:	6e                   	outsb  %ds:(%esi),(%dx)
  2c:	69 65 2f 62 6c 65 73 	imul   $0x73656c62,0x2f(%ebp),%esp
  33:	73 4f                	jae    84 <.debug_str+0x84>
  35:	53                   	push   %ebx
  36:	2f                   	das    
  37:	65                   	gs
  38:	78 2f                	js     69 <.debug_str+0x69>
  3a:	73 72                	jae    ae <main+0xae>
  3c:	63 2f                	arpl   %bp,(%edi)
  3e:	69 6e 69 74 2f 6d 61 	imul   $0x616d2f74,0x69(%esi),%ebp
  45:	69 6e 2e 63 00 73 69 	imul   $0x69730063,0x2e(%esi),%ebp
  4c:	7a 65                	jp     b3 <main+0xb3>
  4e:	74 79                	je     c9 <main+0xc9>
  50:	70 65                	jo     b7 <main+0xb7>
  52:	00 75 6e             	add    %dh,0x6e(%ebp)
  55:	73 69                	jae    c0 <main+0xc0>
  57:	67 6e                	outsb  %ds:(%si),(%dx)
  59:	65 64 20 69 6e       	gs and %ch,%fs:%gs:0x6e(%ecx)
  5e:	74 00                	je     60 <.debug_str+0x60>
  60:	47                   	inc    %edi
  61:	4e                   	dec    %esi
  62:	55                   	push   %ebp
  63:	20 43 20             	and    %al,0x20(%ebx)
  66:	34 2e                	xor    $0x2e,%al
  68:	37                   	aaa    
  69:	2e 33 00             	xor    %cs:(%eax),%eax
  6c:	73 74                	jae    e2 <main+0xe2>
  6e:	61                   	popa   
  6f:	63 6b 5f             	arpl   %bp,0x5f(%ebx)
  72:	73 74                	jae    e8 <main+0xe8>
  74:	61                   	popa   
  75:	72 74                	jb     eb <main+0xeb>
  77:	00 6d 61             	add    %ch,0x61(%ebp)
  7a:	69 6e 00 75 73 65 72 	imul   $0x72657375,0x0(%esi),%ebp
  81:	5f                   	pop    %edi
  82:	73 74                	jae    f8 <main+0xf8>
  84:	61                   	popa   
  85:	63 6b 00             	arpl   %bp,0x0(%ebx)

Disassembly of section .comment:

00000000 <.comment>:
    unsigned short b;
} stack_start = { &user_stack[4096 >> 2], 0x10 };


void main(void)
{
   0:	00 47 43             	add    %al,0x43(%edi)
    while (1)
        __asm__("nop");
   3:	43                   	inc    %ebx
   4:	3a 20                	cmp    (%eax),%ah
   6:	28 44 65 62          	sub    %al,0x62(%ebp,%eiz,2)
   a:	69 61 6e 20 34 2e 37 	imul   $0x372e3420,0x6e(%ecx),%esp
  11:	2e 33 2d 34 29 20 34 	xor    %cs:0x34202934,%ebp
  18:	2e                   	cs
  19:	37                   	aaa    
  1a:	2e 33 00             	xor    %cs:(%eax),%eax

Disassembly of section .eh_frame:

00000000 <.eh_frame>:
   0:	14 00                	adc    $0x0,%al
   2:	00 00                	add    %al,(%eax)
   4:	00 00                	add    %al,(%eax)
   6:	00 00                	add    %al,(%eax)
   8:	01 7a 52             	add    %edi,0x52(%edx)
   b:	00 01                	add    %al,(%ecx)
   d:	7c 08                	jl     17 <.eh_frame+0x17>
   f:	01 1b                	add    %ebx,(%ebx)
  11:	0c 04                	or     $0x4,%al
  13:	04 88                	add    $0x88,%al
  15:	01 00                	add    %eax,(%eax)
  17:	00 18                	add    %bl,(%eax)
  19:	00 00                	add    %al,(%eax)
  1b:	00 1c 00             	add    %bl,(%eax,%eax,1)
  1e:	00 00                	add    %al,(%eax)
  20:	00 00                	add    %al,(%eax)
			20: R_386_PC32	.text
  22:	00 00                	add    %al,(%eax)
  24:	06                   	push   %es
  25:	00 00                	add    %al,(%eax)
  27:	00 00                	add    %al,(%eax)
  29:	41                   	inc    %ecx
  2a:	0e                   	push   %cs
  2b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
  31:	00 00                	add    %al,(%eax)
	...
