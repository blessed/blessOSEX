
/home/blessed/Programowanie/blessOS/ex/src/init/main.o:     file format elf32-i386


Disassembly of section .text:

00000000 <main>:
    u16int b;
} stack_start = { &user_stack[4096 >> 2], 0x10 };


void main(void)
{
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	83 e4 f0             	and    $0xfffffff0,%esp
    console_init();
   6:	e8 fc ff ff ff       	call   7 <main+0x7>
			7: R_386_PC32	console_init

    __asm__("hlt");
   b:	f4                   	hlt    
}
   c:	c9                   	leave  
   d:	c3                   	ret    

Disassembly of section .data:

00000000 <stack_start>:
   0:	00 10                	add    %dl,(%eax)
			0: R_386_32	user_stack
   2:	00 00                	add    %al,(%eax)
   4:	10 00                	adc    %al,(%eax)
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
    u16int b;
} stack_start = { &user_stack[4096 >> 2], 0x10 };


void main(void)
{
   0:	d0 00                	rolb   (%eax)
   2:	00 00                	add    %al,(%eax)
   4:	02 00                	add    (%eax),%al
    console_init();
   6:	00 00                	add    %al,(%eax)
			6: R_386_32	.debug_abbrev
   8:	00 00                	add    %al,(%eax)
   a:	04 01                	add    $0x1,%al

    __asm__("hlt");
}
   c:	12 00                	adc    (%eax),%al
			c: R_386_32	.debug_str
   e:	00 00                	add    %al,(%eax)
  10:	01 5e 00             	add    %ebx,0x0(%esi)
			11: R_386_32	.debug_str
  13:	00 00                	add    %al,(%eax)
  15:	00 00                	add    %al,(%eax)
			15: R_386_32	.text
  17:	00 00                	add    %al,(%eax)
  19:	0e                   	push   %cs
			19: R_386_32	.text
  1a:	00 00                	add    %al,(%eax)
  1c:	00 00                	add    %al,(%eax)
			1d: R_386_32	.debug_line
  1e:	00 00                	add    %al,(%eax)
  20:	00 02                	add    %al,(%edx)
  22:	01 06                	add    %eax,(%esi)
  24:	3f                   	aas    
			24: R_386_32	.debug_str
  25:	00 00                	add    %al,(%eax)
  27:	00 03                	add    %al,(%ebx)
  29:	04 05                	add    $0x5,%al
  2b:	69 6e 74 00 04 44 00 	imul   $0x440400,0x74(%esi),%ebp
			30: R_386_32	.debug_str
  32:	00 00                	add    %al,(%eax)
  34:	02 14 3a             	add    (%edx,%edi,1),%dl
  37:	00 00                	add    %al,(%eax)
  39:	00 02                	add    %al,(%edx)
  3b:	04 07                	add    $0x7,%al
  3d:	00 00                	add    %al,(%eax)
			3d: R_386_32	.debug_str
  3f:	00 00                	add    %al,(%eax)
  41:	04 1e                	add    $0x1e,%al
			42: R_386_32	.debug_str
  43:	00 00                	add    %al,(%eax)
  45:	00 02                	add    %al,(%edx)
  47:	15 4c 00 00 00       	adc    $0x4c,%eax
  4c:	02 02                	add    (%edx),%al
  4e:	07                   	pop    %es
  4f:	4b                   	dec    %ebx
			4f: R_386_32	.debug_str
  50:	00 00                	add    %al,(%eax)
  52:	00 02                	add    %al,(%edx)
  54:	01 08                	add    %ecx,(%eax)
  56:	31 00                	xor    %eax,(%eax)
			56: R_386_32	.debug_str
  58:	00 00                	add    %al,(%eax)
  5a:	05 08 01 05 7b       	add    $0x7b050108,%eax
  5f:	00 00                	add    %al,(%eax)
  61:	00 06                	add    %al,(%esi)
  63:	61                   	popa   
  64:	00 01                	add    %al,(%ecx)
  66:	06                   	push   %es
  67:	7b 00                	jnp    69 <.debug_info+0x69>
  69:	00 00                	add    %al,(%eax)
  6b:	02 23                	add    (%ebx),%ah
  6d:	00 06                	add    %al,(%esi)
  6f:	62 00                	bound  %eax,(%eax)
  71:	01 07                	add    %eax,(%edi)
  73:	41                   	inc    %ecx
  74:	00 00                	add    %al,(%eax)
  76:	00 02                	add    %al,(%edx)
  78:	23 04 00             	and    (%eax,%eax,1),%eax
  7b:	07                   	pop    %es
  7c:	04 2f                	add    $0x2f,%al
  7e:	00 00                	add    %al,(%eax)
  80:	00 08                	add    %cl,(%eax)
  82:	01 0d 00 00 00 01    	add    %ecx,0x1000000
			83: R_386_32	.debug_str
  88:	0b 01                	or     (%ecx),%eax
  8a:	00 00                	add    %al,(%eax)
			8a: R_386_32	.text
  8c:	00 00                	add    %al,(%eax)
  8e:	0e                   	push   %cs
			8e: R_386_32	.text
  8f:	00 00                	add    %al,(%eax)
  91:	00 00                	add    %al,(%eax)
			92: R_386_32	.debug_loc
  93:	00 00                	add    %al,(%eax)
  95:	00 01                	add    %al,(%ecx)
  97:	09 3a                	or     %edi,(%edx)
  99:	00 00                	add    %al,(%eax)
  9b:	00 a8 00 00 00 0a    	add    %ch,0xa000000(%eax)
  a1:	a8 00                	test   $0x0,%al
  a3:	00 00                	add    %al,(%eax)
  a5:	ff 03                	incl   (%ebx)
  a7:	00 02                	add    %al,(%edx)
  a9:	04 07                	add    $0x7,%al
  ab:	a0 00 00 00 0b       	mov    0xb000000,%al
			ab: R_386_32	.debug_str
  b0:	95                   	xchg   %eax,%ebp
			b0: R_386_32	.debug_str
  b1:	00 00                	add    %al,(%eax)
  b3:	00 01                	add    %al,(%ecx)
  b5:	04 97                	add    $0x97,%al
  b7:	00 00                	add    %al,(%eax)
  b9:	00 01                	add    %al,(%ecx)
  bb:	05 03 00 00 00       	add    $0x3,%eax
			bd: R_386_32	user_stack
  c0:	00 0b                	add    %cl,(%ebx)
  c2:	25 00 00 00 01       	and    $0x1000000,%eax
			c2: R_386_32	.debug_str
  c7:	08 5a 00             	or     %bl,0x0(%edx)
  ca:	00 00                	add    %al,(%eax)
  cc:	01 05 03 00 00 00    	add    %eax,0x3
			cf: R_386_32	stack_start
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
    u16int b;
} stack_start = { &user_stack[4096 >> 2], 0x10 };


void main(void)
{
   0:	01 11                	add    %edx,(%ecx)
   2:	01 25 0e 13 0b 03    	add    %esp,0x30b130e
    console_init();
   8:	0e                   	push   %cs
   9:	11 01                	adc    %eax,(%ecx)

    __asm__("hlt");
   b:	12 01                	adc    (%ecx),%al
}
   d:	10 06                	adc    %al,(%esi)
   f:	00 00                	add    %al,(%eax)
  11:	02 24 00             	add    (%eax,%eax,1),%ah
  14:	0b 0b                	or     (%ebx),%ecx
  16:	3e 0b 03             	or     %ds:(%ebx),%eax
  19:	0e                   	push   %cs
  1a:	00 00                	add    %al,(%eax)
  1c:	03 24 00             	add    (%eax,%eax,1),%esp
  1f:	0b 0b                	or     (%ebx),%ecx
  21:	3e 0b 03             	or     %ds:(%ebx),%eax
  24:	08 00                	or     %al,(%eax)
  26:	00 04 16             	add    %al,(%esi,%edx,1)
  29:	00 03                	add    %al,(%ebx)
  2b:	0e                   	push   %cs
  2c:	3a 0b                	cmp    (%ebx),%cl
  2e:	3b 0b                	cmp    (%ebx),%ecx
  30:	49                   	dec    %ecx
  31:	13 00                	adc    (%eax),%eax
  33:	00 05 13 01 0b 0b    	add    %al,0xb0b0113
  39:	3a 0b                	cmp    (%ebx),%cl
  3b:	3b 0b                	cmp    (%ebx),%ecx
  3d:	01 13                	add    %edx,(%ebx)
  3f:	00 00                	add    %al,(%eax)
  41:	06                   	push   %es
  42:	0d 00 03 08 3a       	or     $0x3a080300,%eax
  47:	0b 3b                	or     (%ebx),%edi
  49:	0b 49 13             	or     0x13(%ecx),%ecx
  4c:	38 0a                	cmp    %cl,(%edx)
  4e:	00 00                	add    %al,(%eax)
  50:	07                   	pop    %es
  51:	0f 00 0b             	str    (%ebx)
  54:	0b 49 13             	or     0x13(%ecx),%ecx
  57:	00 00                	add    %al,(%eax)
  59:	08 2e                	or     %ch,(%esi)
  5b:	00 3f                	add    %bh,(%edi)
  5d:	0c 03                	or     $0x3,%al
  5f:	0e                   	push   %cs
  60:	3a 0b                	cmp    (%ebx),%cl
  62:	3b 0b                	cmp    (%ebx),%ecx
  64:	27                   	daa    
  65:	0c 11                	or     $0x11,%al
  67:	01 12                	add    %edx,(%edx)
  69:	01 40 06             	add    %eax,0x6(%eax)
  6c:	96                   	xchg   %eax,%esi
  6d:	42                   	inc    %edx
  6e:	0c 00                	or     $0x0,%al
  70:	00 09                	add    %cl,(%ecx)
  72:	01 01                	add    %eax,(%ecx)
  74:	49                   	dec    %ecx
  75:	13 01                	adc    (%ecx),%eax
  77:	13 00                	adc    (%eax),%eax
  79:	00 0a                	add    %cl,(%edx)
  7b:	21 00                	and    %eax,(%eax)
  7d:	49                   	dec    %ecx
  7e:	13 2f                	adc    (%edi),%ebp
  80:	05 00 00 0b 34       	add    $0x340b0000,%eax
  85:	00 03                	add    %al,(%ebx)
  87:	0e                   	push   %cs
  88:	3a 0b                	cmp    (%ebx),%cl
  8a:	3b 0b                	cmp    (%ebx),%ecx
  8c:	49                   	dec    %ecx
  8d:	13 3f                	adc    (%edi),%edi
  8f:	0c 02                	or     $0x2,%al
  91:	0a 00                	or     (%eax),%al
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
    u16int b;
} stack_start = { &user_stack[4096 >> 2], 0x10 };


void main(void)
{
   0:	00 00                	add    %al,(%eax)
   2:	00 00                	add    %al,(%eax)
   4:	01 00                	add    %eax,(%eax)
    console_init();
   6:	00 00                	add    %al,(%eax)
   8:	02 00                	add    (%eax),%al
   a:	74 04                	je     10 <.debug_loc+0x10>

    __asm__("hlt");
}
   c:	01 00                	add    %eax,(%eax)
   e:	00 00                	add    %al,(%eax)
  10:	03 00                	add    (%eax),%eax
  12:	00 00                	add    %al,(%eax)
  14:	02 00                	add    (%eax),%al
  16:	74 08                	je     20 <.debug_loc+0x20>
  18:	03 00                	add    (%eax),%eax
  1a:	00 00                	add    %al,(%eax)
  1c:	0d 00 00 00 02       	or     $0x2000000,%eax
  21:	00 75 08             	add    %dh,0x8(%ebp)
  24:	0d 00 00 00 0e       	or     $0xe000000,%eax
  29:	00 00                	add    %al,(%eax)
  2b:	00 02                	add    %al,(%edx)
  2d:	00 74 04 00          	add    %dh,0x0(%esp,%eax,1)
  31:	00 00                	add    %al,(%eax)
  33:	00 00                	add    %al,(%eax)
  35:	00 00                	add    %al,(%eax)
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
    u16int b;
} stack_start = { &user_stack[4096 >> 2], 0x10 };


void main(void)
{
   0:	1c 00                	sbb    $0x0,%al
   2:	00 00                	add    %al,(%eax)
   4:	02 00                	add    (%eax),%al
    console_init();
   6:	00 00                	add    %al,(%eax)
			6: R_386_32	.debug_info
   8:	00 00                	add    %al,(%eax)
   a:	04 00                	add    $0x0,%al
	...
			10: R_386_32	.text
  14:	0e                   	push   %cs
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
    u16int b;
} stack_start = { &user_stack[4096 >> 2], 0x10 };


void main(void)
{
   0:	a2 00 00 00 02       	mov    %al,0x2000000
   5:	00 8a 00 00 00 01    	add    %cl,0x1000000(%edx)
    console_init();

    __asm__("hlt");
   b:	01 fb                	add    %edi,%ebx
}
   d:	0e                   	push   %cs
   e:	0d 00 01 01 01       	or     $0x1010100,%eax
  13:	01 00                	add    %eax,(%eax)
  15:	00 00                	add    %al,(%eax)
  17:	01 00                	add    %eax,(%eax)
  19:	00 01                	add    %al,(%ecx)
  1b:	2f                   	das    
  1c:	68 6f 6d 65 2f       	push   $0x2f656d6f
  21:	62 6c 65 73          	bound  %ebp,0x73(%ebp,%eiz,2)
  25:	73 65                	jae    8c <.debug_line+0x8c>
  27:	64                   	fs
  28:	2f                   	das    
  29:	50                   	push   %eax
  2a:	72 6f                	jb     9b <.debug_line+0x9b>
  2c:	67 72 61             	addr16 jb 90 <.debug_line+0x90>
  2f:	6d                   	insl   (%dx),%es:(%edi)
  30:	6f                   	outsl  %ds:(%esi),(%dx)
  31:	77 61                	ja     94 <.debug_line+0x94>
  33:	6e                   	outsb  %ds:(%esi),(%dx)
  34:	69 65 2f 62 6c 65 73 	imul   $0x73656c62,0x2f(%ebp),%esp
  3b:	73 4f                	jae    8c <.debug_line+0x8c>
  3d:	53                   	push   %ebx
  3e:	2f                   	das    
  3f:	65                   	gs
  40:	78 2f                	js     71 <.debug_line+0x71>
  42:	73 72                	jae    b6 <main+0xb6>
  44:	63 2f                	arpl   %bp,(%edi)
  46:	69 6e 69 74 00 2f 68 	imul   $0x682f0074,0x69(%esi),%ebp
  4d:	6f                   	outsl  %ds:(%esi),(%dx)
  4e:	6d                   	insl   (%dx),%es:(%edi)
  4f:	65                   	gs
  50:	2f                   	das    
  51:	62 6c 65 73          	bound  %ebp,0x73(%ebp,%eiz,2)
  55:	73 65                	jae    bc <main+0xbc>
  57:	64                   	fs
  58:	2f                   	das    
  59:	50                   	push   %eax
  5a:	72 6f                	jb     cb <main+0xcb>
  5c:	67 72 61             	addr16 jb c0 <main+0xc0>
  5f:	6d                   	insl   (%dx),%es:(%edi)
  60:	6f                   	outsl  %ds:(%esi),(%dx)
  61:	77 61                	ja     c4 <main+0xc4>
  63:	6e                   	outsb  %ds:(%esi),(%dx)
  64:	69 65 2f 62 6c 65 73 	imul   $0x73656c62,0x2f(%ebp),%esp
  6b:	73 4f                	jae    bc <main+0xbc>
  6d:	53                   	push   %ebx
  6e:	2f                   	das    
  6f:	65                   	gs
  70:	78 2f                	js     a1 <.debug_line+0xa1>
  72:	69 6e 63 2f 63 6f 6d 	imul   $0x6d6f632f,0x63(%esi),%ebp
  79:	6d                   	insl   (%dx),%es:(%edi)
  7a:	6f                   	outsl  %ds:(%esi),(%dx)
  7b:	6e                   	outsb  %ds:(%esi),(%dx)
  7c:	00 00                	add    %al,(%eax)
  7e:	6d                   	insl   (%dx),%es:(%edi)
  7f:	61                   	popa   
  80:	69 6e 2e 63 00 01 00 	imul   $0x10063,0x2e(%esi),%ebp
  87:	00 74 79 70          	add    %dh,0x70(%ecx,%edi,2)
  8b:	65                   	gs
  8c:	73 2e                	jae    bc <main+0xbc>
  8e:	68 00 02 00 00       	push   $0x200
  93:	00 00                	add    %al,(%eax)
  95:	05 02 00 00 00       	add    $0x2,%eax
			97: R_386_32	.text
  9a:	00 03                	add    %al,(%ebx)
  9c:	0b 01                	or     (%ecx),%eax
  9e:	67 5a                	addr16 pop %edx
  a0:	21 02                	and    %eax,(%edx)
  a2:	02 00                	add    (%eax),%al
  a4:	01 01                	add    %eax,(%ecx)

Disassembly of section .debug_str:

00000000 <.debug_str>:
    u16int b;
} stack_start = { &user_stack[4096 >> 2], 0x10 };


void main(void)
{
   0:	75 6e                	jne    70 <.debug_str+0x70>
   2:	73 69                	jae    6d <.debug_str+0x6d>
   4:	67 6e                	outsb  %ds:(%si),(%dx)
    console_init();
   6:	65 64 20 69 6e       	gs and %ch,%fs:%gs:0x6e(%ecx)

    __asm__("hlt");
   b:	74 00                	je     d <.debug_str+0xd>
}
   d:	6d                   	insl   (%dx),%es:(%edi)
   e:	61                   	popa   
   f:	69 6e 00 47 4e 55 20 	imul   $0x20554e47,0x0(%esi),%ebp
  16:	43                   	inc    %ebx
  17:	20 34 2e             	and    %dh,(%esi,%ebp,1)
  1a:	37                   	aaa    
  1b:	2e 33 00             	xor    %cs:(%eax),%eax
  1e:	75 31                	jne    51 <.debug_str+0x51>
  20:	36 69 6e 74 00 73 74 	imul   $0x61747300,%ss:0x74(%esi),%ebp
  27:	61 
  28:	63 6b 5f             	arpl   %bp,0x5f(%ebx)
  2b:	73 74                	jae    a1 <.debug_str+0xa1>
  2d:	61                   	popa   
  2e:	72 74                	jb     a4 <.debug_str+0xa4>
  30:	00 75 6e             	add    %dh,0x6e(%ebp)
  33:	73 69                	jae    9e <.debug_str+0x9e>
  35:	67 6e                	outsb  %ds:(%si),(%dx)
  37:	65 64 20 63 68       	gs and %ah,%fs:%gs:0x68(%ebx)
  3c:	61                   	popa   
  3d:	72 00                	jb     3f <.debug_str+0x3f>
  3f:	63 68 61             	arpl   %bp,0x61(%eax)
  42:	72 00                	jb     44 <.debug_str+0x44>
  44:	75 33                	jne    79 <.debug_str+0x79>
  46:	32 69 6e             	xor    0x6e(%ecx),%ch
  49:	74 00                	je     4b <.debug_str+0x4b>
  4b:	73 68                	jae    b5 <main+0xb5>
  4d:	6f                   	outsl  %ds:(%esi),(%dx)
  4e:	72 74                	jb     c4 <main+0xc4>
  50:	20 75 6e             	and    %dh,0x6e(%ebp)
  53:	73 69                	jae    be <main+0xbe>
  55:	67 6e                	outsb  %ds:(%si),(%dx)
  57:	65 64 20 69 6e       	gs and %ch,%fs:%gs:0x6e(%ecx)
  5c:	74 00                	je     5e <.debug_str+0x5e>
  5e:	2f                   	das    
  5f:	68 6f 6d 65 2f       	push   $0x2f656d6f
  64:	62 6c 65 73          	bound  %ebp,0x73(%ebp,%eiz,2)
  68:	73 65                	jae    cf <main+0xcf>
  6a:	64                   	fs
  6b:	2f                   	das    
  6c:	50                   	push   %eax
  6d:	72 6f                	jb     de <main+0xde>
  6f:	67 72 61             	addr16 jb d3 <main+0xd3>
  72:	6d                   	insl   (%dx),%es:(%edi)
  73:	6f                   	outsl  %ds:(%esi),(%dx)
  74:	77 61                	ja     d7 <main+0xd7>
  76:	6e                   	outsb  %ds:(%esi),(%dx)
  77:	69 65 2f 62 6c 65 73 	imul   $0x73656c62,0x2f(%ebp),%esp
  7e:	73 4f                	jae    cf <main+0xcf>
  80:	53                   	push   %ebx
  81:	2f                   	das    
  82:	65                   	gs
  83:	78 2f                	js     b4 <main+0xb4>
  85:	73 72                	jae    f9 <main+0xf9>
  87:	63 2f                	arpl   %bp,(%edi)
  89:	69 6e 69 74 2f 6d 61 	imul   $0x616d2f74,0x69(%esi),%ebp
  90:	69 6e 2e 63 00 75 73 	imul   $0x73750063,0x2e(%esi),%ebp
  97:	65                   	gs
  98:	72 5f                	jb     f9 <main+0xf9>
  9a:	73 74                	jae    110 <main+0x110>
  9c:	61                   	popa   
  9d:	63 6b 00             	arpl   %bp,0x0(%ebx)
  a0:	73 69                	jae    10b <main+0x10b>
  a2:	7a 65                	jp     109 <main+0x109>
  a4:	74 79                	je     11f <main+0x11f>
  a6:	70 65                	jo     10d <main+0x10d>
	...

Disassembly of section .comment:

00000000 <.comment>:
    u16int b;
} stack_start = { &user_stack[4096 >> 2], 0x10 };


void main(void)
{
   0:	00 47 43             	add    %al,0x43(%edi)
   3:	43                   	inc    %ebx
   4:	3a 20                	cmp    (%eax),%ah
    console_init();
   6:	28 44 65 62          	sub    %al,0x62(%ebp,%eiz,2)
   a:	69 61 6e 20 34 2e 37 	imul   $0x372e3420,0x6e(%ecx),%esp
  11:	2e 33 2d 34 29 20 34 	xor    %cs:0x34202934,%ebp
  18:	2e                   	cs
  19:	37                   	aaa    
  1a:	2e 33 00             	xor    %cs:(%eax),%eax

Disassembly of section .eh_frame:

00000000 <.eh_frame>:
   0:	14 00                	adc    $0x0,%al
   2:	00 00                	add    %al,(%eax)
   4:	00 00                	add    %al,(%eax)
   6:	00 00                	add    %al,(%eax)
   8:	01 7a 52             	add    %edi,0x52(%edx)
   b:	00 01                	add    %al,(%ecx)
   d:	7c 08                	jl     17 <.eh_frame+0x17>
   f:	01 1b                	add    %ebx,(%ebx)
  11:	0c 04                	or     $0x4,%al
  13:	04 88                	add    $0x88,%al
  15:	01 00                	add    %eax,(%eax)
  17:	00 1c 00             	add    %bl,(%eax,%eax,1)
  1a:	00 00                	add    %al,(%eax)
  1c:	1c 00                	sbb    $0x0,%al
  1e:	00 00                	add    %al,(%eax)
  20:	00 00                	add    %al,(%eax)
			20: R_386_PC32	.text
  22:	00 00                	add    %al,(%eax)
  24:	0e                   	push   %cs
  25:	00 00                	add    %al,(%eax)
  27:	00 00                	add    %al,(%eax)
  29:	41                   	inc    %ecx
  2a:	0e                   	push   %cs
  2b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
  31:	4a                   	dec    %edx
  32:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
  35:	04 00                	add    $0x0,%al
	...
