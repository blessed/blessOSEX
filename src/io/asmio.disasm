
/home/blessed/Programowanie/blessOS/ex/src/io/asmio.o:     file format elf32-i386


Disassembly of section .text:

00000000 <outb>:
/* This file is part of the GLEG engine (GPL v2 or later), see LICENSE.html */

#include "io/asmio.h"

void outb(u8int val, u16int port)
{
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	83 ec 08             	sub    $0x8,%esp
   6:	8b 55 08             	mov    0x8(%ebp),%edx
   9:	8b 45 0c             	mov    0xc(%ebp),%eax
   c:	88 55 fc             	mov    %dl,-0x4(%ebp)
   f:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    asm("outb %%al, %%dx" : : "a"(val), "d"(port));
  13:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
  17:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
  1b:	ee                   	out    %al,(%dx)
}
  1c:	c9                   	leave  
  1d:	c3                   	ret    

0000001e <outw>:

void outw(u16int val, u16int port)
{
  1e:	55                   	push   %ebp
  1f:	89 e5                	mov    %esp,%ebp
  21:	83 ec 08             	sub    $0x8,%esp
  24:	8b 55 08             	mov    0x8(%ebp),%edx
  27:	8b 45 0c             	mov    0xc(%ebp),%eax
  2a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
  2e:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    asm("outw %%ax, %%dx" : : "a"(val), "d"(port));
  32:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
  36:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
  3a:	66 ef                	out    %ax,(%dx)
}
  3c:	c9                   	leave  
  3d:	c3                   	ret    

0000003e <inb>:

u8int inb(u16int port)
{
  3e:	55                   	push   %ebp
  3f:	89 e5                	mov    %esp,%ebp
  41:	53                   	push   %ebx
  42:	83 ec 14             	sub    $0x14,%esp
  45:	8b 45 08             	mov    0x8(%ebp),%eax
  48:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    u8int ret;
    asm("inb %%dx, %%al" : "=a"(ret) : "d"(port));
  4c:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
  50:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
  54:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
  58:	ec                   	in     (%dx),%al
  59:	89 c3                	mov    %eax,%ebx
  5b:	88 5d fb             	mov    %bl,-0x5(%ebp)

    return ret;
  5e:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
}
  62:	83 c4 14             	add    $0x14,%esp
  65:	5b                   	pop    %ebx
  66:	5d                   	pop    %ebp
  67:	c3                   	ret    

00000068 <inw>:

u16int inw(u16int port)
{
  68:	55                   	push   %ebp
  69:	89 e5                	mov    %esp,%ebp
  6b:	53                   	push   %ebx
  6c:	83 ec 14             	sub    $0x14,%esp
  6f:	8b 45 08             	mov    0x8(%ebp),%eax
  72:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
    u16int ret;
    asm("inw %%dx, %%ax" : "=a"(ret) : "d"(port));
  76:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
  7a:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
  7e:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
  82:	66 ed                	in     (%dx),%ax
  84:	89 c3                	mov    %eax,%ebx
  86:	66 89 5d fa          	mov    %bx,-0x6(%ebp)

    return ret;
  8a:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
}
  8e:	83 c4 14             	add    $0x14,%esp
  91:	5b                   	pop    %ebx
  92:	5d                   	pop    %ebp
  93:	c3                   	ret    

Disassembly of section .debug_info:

00000000 <.debug_info>:
/* This file is part of the GLEG engine (GPL v2 or later), see LICENSE.html */

#include "io/asmio.h"

void outb(u8int val, u16int port)
{
   0:	37                   	aaa    
   1:	01 00                	add    %eax,(%eax)
   3:	00 02                	add    %al,(%edx)
   5:	00 00                	add    %al,(%eax)
			6: R_386_32	.debug_abbrev
   7:	00 00                	add    %al,(%eax)
   9:	00 04 01             	add    %al,(%ecx,%eax,1)
   c:	4f                   	dec    %edi
			c: R_386_32	.debug_str
   d:	00 00                	add    %al,(%eax)
   f:	00 01                	add    %al,(%ecx)
  11:	19 00                	sbb    %eax,(%eax)
			11: R_386_32	.debug_str
    asm("outb %%al, %%dx" : : "a"(val), "d"(port));
  13:	00 00                	add    %al,(%eax)
  15:	00 00                	add    %al,(%eax)
			15: R_386_32	.text
  17:	00 00                	add    %al,(%eax)
  19:	94                   	xchg   %eax,%esp
			19: R_386_32	.text
  1a:	00 00                	add    %al,(%eax)
}
  1c:	00 00                	add    %al,(%eax)
			1d: R_386_32	.debug_line

void outw(u16int val, u16int port)
{
  1e:	00 00                	add    %al,(%eax)
  20:	00 02                	add    %al,(%edx)
  22:	01 06                	add    %eax,(%esi)
  24:	86 00                	xchg   %al,(%eax)
			24: R_386_32	.debug_str
  26:	00 00                	add    %al,(%eax)
  28:	03 04 05 69 6e 74 00 	add    0x746e69(,%eax,1),%eax
  2f:	02 04 07             	add    (%edi,%eax,1),%al
    asm("outw %%ax, %%dx" : : "a"(val), "d"(port));
  32:	00 00                	add    %al,(%eax)
			32: R_386_32	.debug_str
  34:	00 00                	add    %al,(%eax)
  36:	04 0d                	add    $0xd,%al
			37: R_386_32	.debug_str
  38:	00 00                	add    %al,(%eax)
  3a:	00 02                	add    %al,(%edx)
}
  3c:	15 41 00 00 00       	adc    $0x41,%eax

u8int inb(u16int port)
{
  41:	02 02                	add    (%edx),%al
  43:	07                   	pop    %es
  44:	60                   	pusha  
			44: R_386_32	.debug_str
  45:	00 00                	add    %al,(%eax)
  47:	00 04 8b             	add    %al,(%ebx,%ecx,4)
			49: R_386_32	.debug_str
  4a:	00 00                	add    %al,(%eax)
    u8int ret;
    asm("inb %%dx, %%al" : "=a"(ret) : "d"(port));
  4c:	00 02                	add    %al,(%edx)
  4e:	16                   	push   %ss
  4f:	53                   	push   %ebx
  50:	00 00                	add    %al,(%eax)
  52:	00 02                	add    %al,(%edx)
  54:	01 08                	add    %ecx,(%eax)
  56:	73 00                	jae    58 <.debug_info+0x58>
			56: R_386_32	.debug_str
  58:	00 00                	add    %al,(%eax)
  5a:	05 01 14 00 00       	add    $0x1401,%eax
			5c: R_386_32	.debug_str

    return ret;
  5f:	00 01                	add    %al,(%ecx)
  61:	05 01 00 00 00       	add    $0x1,%eax
			63: R_386_32	.text
}
  66:	00 1e                	add    %bl,(%esi)
			67: R_386_32	.text

u16int inw(u16int port)
{
  68:	00 00                	add    %al,(%eax)
  6a:	00 00                	add    %al,(%eax)
			6b: R_386_32	.debug_loc
  6c:	00 00                	add    %al,(%eax)
  6e:	00 01                	add    %al,(%ecx)
  70:	91                   	xchg   %eax,%ecx
  71:	00 00                	add    %al,(%eax)
  73:	00 06                	add    %al,(%esi)
  75:	76 61                	jbe    d8 <.debug_info+0xd8>
    u16int ret;
    asm("inw %%dx, %%ax" : "=a"(ret) : "d"(port));
  77:	6c                   	insb   (%dx),%es:(%edi)
  78:	00 01                	add    %al,(%ecx)
  7a:	05 48 00 00 00       	add    $0x48,%eax
  7f:	02 91 74 07 81 00    	add    0x810774(%ecx),%dl
			83: R_386_32	.debug_str
  85:	00 00                	add    %al,(%eax)
  87:	01 05 36 00 00 00    	add    %eax,0x36

    return ret;
  8d:	02 91 70 00 05 01    	add    0x1050070(%ecx),%dl
}
  93:	5b                   	pop    %ebx
			93: R_386_32	.debug_str
  94:	00 00                	add    %al,(%eax)
  96:	00 01                	add    %al,(%ecx)
  98:	0a 01                	or     (%ecx),%al
  9a:	1e                   	push   %ds
			9a: R_386_32	.text
  9b:	00 00                	add    %al,(%eax)
  9d:	00 3e                	add    %bh,(%esi)
			9e: R_386_32	.text
  9f:	00 00                	add    %al,(%eax)
  a1:	00 38                	add    %bh,(%eax)
			a2: R_386_32	.debug_loc
  a3:	00 00                	add    %al,(%eax)
  a5:	00 01                	add    %al,(%ecx)
  a7:	c8 00 00 00          	enter  $0x0,$0x0
  ab:	06                   	push   %es
  ac:	76 61                	jbe    10f <.debug_info+0x10f>
  ae:	6c                   	insb   (%dx),%es:(%edi)
  af:	00 01                	add    %al,(%ecx)
  b1:	0a 36                	or     (%esi),%dh
  b3:	00 00                	add    %al,(%eax)
  b5:	00 02                	add    %al,(%edx)
  b7:	91                   	xchg   %eax,%ecx
  b8:	74 07                	je     c1 <.debug_info+0xc1>
  ba:	81 00 00 00 01 0a    	addl   $0xa010000,(%eax)
			ba: R_386_32	.debug_str
  c0:	36 00 00             	add    %al,%ss:(%eax)
  c3:	00 02                	add    %al,(%edx)
  c5:	91                   	xchg   %eax,%ecx
  c6:	70 00                	jo     c8 <.debug_info+0xc8>
  c8:	08 01                	or     %al,(%ecx)
  ca:	69 6e 62 00 01 0f 01 	imul   $0x10f0100,0x62(%esi),%ebp
  d1:	48                   	dec    %eax
  d2:	00 00                	add    %al,(%eax)
  d4:	00 3e                	add    %bh,(%esi)
			d5: R_386_32	.text
  d6:	00 00                	add    %al,(%eax)
  d8:	00 68 00             	add    %ch,0x0(%eax)
			d9: R_386_32	.text
  db:	00 00                	add    %al,(%eax)
  dd:	70 00                	jo     df <.debug_info+0xdf>
			dd: R_386_32	.debug_loc
  df:	00 00                	add    %al,(%eax)
  e1:	01 03                	add    %eax,(%ebx)
  e3:	01 00                	add    %eax,(%eax)
  e5:	00 07                	add    %al,(%edi)
  e7:	81 00 00 00 01 0f    	addl   $0xf010000,(%eax)
			e7: R_386_32	.debug_str
  ed:	36 00 00             	add    %al,%ss:(%eax)
  f0:	00 02                	add    %al,(%edx)
  f2:	91                   	xchg   %eax,%ecx
  f3:	60                   	pusha  
  f4:	09 72 65             	or     %esi,0x65(%edx)
  f7:	74 00                	je     f9 <.debug_info+0xf9>
  f9:	01 11                	add    %edx,(%ecx)
  fb:	48                   	dec    %eax
  fc:	00 00                	add    %al,(%eax)
  fe:	00 02                	add    %al,(%edx)
 100:	91                   	xchg   %eax,%ecx
 101:	73 00                	jae    103 <.debug_info+0x103>
 103:	0a 01                	or     (%ecx),%al
 105:	69 6e 77 00 01 17 01 	imul   $0x1170100,0x77(%esi),%ebp
 10c:	36 00 00             	add    %al,%ss:(%eax)
 10f:	00 68 00             	add    %ch,0x0(%eax)
			110: R_386_32	.text
 112:	00 00                	add    %al,(%eax)
 114:	94                   	xchg   %eax,%esp
			114: R_386_32	.text
 115:	00 00                	add    %al,(%eax)
 117:	00 a8 00 00 00 01    	add    %ch,0x1000000(%eax)
			118: R_386_32	.debug_loc
 11d:	07                   	pop    %es
 11e:	81 00 00 00 01 17    	addl   $0x17010000,(%eax)
			11e: R_386_32	.debug_str
 124:	36 00 00             	add    %al,%ss:(%eax)
 127:	00 02                	add    %al,(%edx)
 129:	91                   	xchg   %eax,%ecx
 12a:	60                   	pusha  
 12b:	09 72 65             	or     %esi,0x65(%edx)
 12e:	74 00                	je     130 <.debug_info+0x130>
 130:	01 19                	add    %ebx,(%ecx)
 132:	36 00 00             	add    %al,%ss:(%eax)
 135:	00 02                	add    %al,(%edx)
 137:	91                   	xchg   %eax,%ecx
 138:	72 00                	jb     13a <.debug_info+0x13a>
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
/* This file is part of the GLEG engine (GPL v2 or later), see LICENSE.html */

#include "io/asmio.h"

void outb(u8int val, u16int port)
{
   0:	01 11                	add    %edx,(%ecx)
   2:	01 25 0e 13 0b 03    	add    %esp,0x30b130e
   8:	0e                   	push   %cs
   9:	11 01                	adc    %eax,(%ecx)
   b:	12 01                	adc    (%ecx),%al
   d:	10 06                	adc    %al,(%esi)
   f:	00 00                	add    %al,(%eax)
  11:	02 24 00             	add    (%eax,%eax,1),%ah
    asm("outb %%al, %%dx" : : "a"(val), "d"(port));
  14:	0b 0b                	or     (%ebx),%ecx
  16:	3e 0b 03             	or     %ds:(%ebx),%eax
  19:	0e                   	push   %cs
  1a:	00 00                	add    %al,(%eax)
}
  1c:	03 24 00             	add    (%eax,%eax,1),%esp

void outw(u16int val, u16int port)
{
  1f:	0b 0b                	or     (%ebx),%ecx
  21:	3e 0b 03             	or     %ds:(%ebx),%eax
  24:	08 00                	or     %al,(%eax)
  26:	00 04 16             	add    %al,(%esi,%edx,1)
  29:	00 03                	add    %al,(%ebx)
  2b:	0e                   	push   %cs
  2c:	3a 0b                	cmp    (%ebx),%cl
  2e:	3b 0b                	cmp    (%ebx),%ecx
  30:	49                   	dec    %ecx
  31:	13 00                	adc    (%eax),%eax
    asm("outw %%ax, %%dx" : : "a"(val), "d"(port));
  33:	00 05 2e 01 3f 0c    	add    %al,0xc3f012e
  39:	03 0e                	add    (%esi),%ecx
  3b:	3a 0b                	cmp    (%ebx),%cl
}
  3d:	3b 0b                	cmp    (%ebx),%ecx

u8int inb(u16int port)
{
  3f:	27                   	daa    
  40:	0c 11                	or     $0x11,%al
  42:	01 12                	add    %edx,(%edx)
  44:	01 40 06             	add    %eax,0x6(%eax)
  47:	97                   	xchg   %eax,%edi
  48:	42                   	inc    %edx
  49:	0c 01                	or     $0x1,%al
  4b:	13 00                	adc    (%eax),%eax
    u8int ret;
    asm("inb %%dx, %%al" : "=a"(ret) : "d"(port));
  4d:	00 06                	add    %al,(%esi)
  4f:	05 00 03 08 3a       	add    $0x3a080300,%eax
  54:	0b 3b                	or     (%ebx),%edi
  56:	0b 49 13             	or     0x13(%ecx),%ecx
  59:	02 0a                	add    (%edx),%cl
  5b:	00 00                	add    %al,(%eax)
  5d:	07                   	pop    %es

    return ret;
  5e:	05 00 03 0e 3a       	add    $0x3a0e0300,%eax
}
  63:	0b 3b                	or     (%ebx),%edi
  65:	0b 49 13             	or     0x13(%ecx),%ecx

u16int inw(u16int port)
{
  68:	02 0a                	add    (%edx),%cl
  6a:	00 00                	add    %al,(%eax)
  6c:	08 2e                	or     %ch,(%esi)
  6e:	01 3f                	add    %edi,(%edi)
  70:	0c 03                	or     $0x3,%al
  72:	08 3a                	or     %bh,(%edx)
  74:	0b 3b                	or     (%ebx),%edi
    u16int ret;
    asm("inw %%dx, %%ax" : "=a"(ret) : "d"(port));
  76:	0b 27                	or     (%edi),%esp
  78:	0c 49                	or     $0x49,%al
  7a:	13 11                	adc    (%ecx),%edx
  7c:	01 12                	add    %edx,(%edx)
  7e:	01 40 06             	add    %eax,0x6(%eax)
  81:	97                   	xchg   %eax,%edi
  82:	42                   	inc    %edx
  83:	0c 01                	or     $0x1,%al
  85:	13 00                	adc    (%eax),%eax
  87:	00 09                	add    %cl,(%ecx)
  89:	34 00                	xor    $0x0,%al

    return ret;
  8b:	03 08                	add    (%eax),%ecx
  8d:	3a 0b                	cmp    (%ebx),%cl
}
  8f:	3b 0b                	cmp    (%ebx),%ecx
  91:	49                   	dec    %ecx
  92:	13 02                	adc    (%edx),%eax
  94:	0a 00                	or     (%eax),%al
  96:	00 0a                	add    %cl,(%edx)
  98:	2e 01 3f             	add    %edi,%cs:(%edi)
  9b:	0c 03                	or     $0x3,%al
  9d:	08 3a                	or     %bh,(%edx)
  9f:	0b 3b                	or     (%ebx),%edi
  a1:	0b 27                	or     (%edi),%esp
  a3:	0c 49                	or     $0x49,%al
  a5:	13 11                	adc    (%ecx),%edx
  a7:	01 12                	add    %edx,(%edx)
  a9:	01 40 06             	add    %eax,0x6(%eax)
  ac:	97                   	xchg   %eax,%edi
  ad:	42                   	inc    %edx
  ae:	0c 00                	or     $0x0,%al
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
/* This file is part of the GLEG engine (GPL v2 or later), see LICENSE.html */

#include "io/asmio.h"

void outb(u8int val, u16int port)
{
   0:	00 00                	add    %al,(%eax)
   2:	00 00                	add    %al,(%eax)
   4:	01 00                	add    %eax,(%eax)
   6:	00 00                	add    %al,(%eax)
   8:	02 00                	add    (%eax),%al
   a:	74 04                	je     10 <.debug_loc+0x10>
   c:	01 00                	add    %eax,(%eax)
   e:	00 00                	add    %al,(%eax)
  10:	03 00                	add    (%eax),%eax
  12:	00 00                	add    %al,(%eax)
    asm("outb %%al, %%dx" : : "a"(val), "d"(port));
  14:	02 00                	add    (%eax),%al
  16:	74 08                	je     20 <.debug_loc+0x20>
  18:	03 00                	add    (%eax),%eax
  1a:	00 00                	add    %al,(%eax)
}
  1c:	1d 00 00 00 02       	sbb    $0x2000000,%eax

void outw(u16int val, u16int port)
{
  21:	00 75 08             	add    %dh,0x8(%ebp)
  24:	1d 00 00 00 1e       	sbb    $0x1e000000,%eax
  29:	00 00                	add    %al,(%eax)
  2b:	00 02                	add    %al,(%edx)
  2d:	00 74 04 00          	add    %dh,0x0(%esp,%eax,1)
  31:	00 00                	add    %al,(%eax)
    asm("outw %%ax, %%dx" : : "a"(val), "d"(port));
  33:	00 00                	add    %al,(%eax)
  35:	00 00                	add    %al,(%eax)
  37:	00 1e                	add    %bl,(%esi)
  39:	00 00                	add    %al,(%eax)
  3b:	00 1f                	add    %bl,(%edi)
}
  3d:	00 00                	add    %al,(%eax)

u8int inb(u16int port)
{
  3f:	00 02                	add    %al,(%edx)
  41:	00 74 04 1f          	add    %dh,0x1f(%esp,%eax,1)
  45:	00 00                	add    %al,(%eax)
  47:	00 21                	add    %ah,(%ecx)
  49:	00 00                	add    %al,(%eax)
  4b:	00 02                	add    %al,(%edx)
    u8int ret;
    asm("inb %%dx, %%al" : "=a"(ret) : "d"(port));
  4d:	00 74 08 21          	add    %dh,0x21(%eax,%ecx,1)
  51:	00 00                	add    %al,(%eax)
  53:	00 3d 00 00 00 02    	add    %bh,0x2000000
  59:	00 75 08             	add    %dh,0x8(%ebp)
  5c:	3d 00 00 00 3e       	cmp    $0x3e000000,%eax

    return ret;
  61:	00 00                	add    %al,(%eax)
}
  63:	00 02                	add    %al,(%edx)
  65:	00 74 04 00          	add    %dh,0x0(%esp,%eax,1)

u16int inw(u16int port)
{
  69:	00 00                	add    %al,(%eax)
  6b:	00 00                	add    %al,(%eax)
  6d:	00 00                	add    %al,(%eax)
  6f:	00 3e                	add    %bh,(%esi)
  71:	00 00                	add    %al,(%eax)
  73:	00 3f                	add    %bh,(%edi)
  75:	00 00                	add    %al,(%eax)
    u16int ret;
    asm("inw %%dx, %%ax" : "=a"(ret) : "d"(port));
  77:	00 02                	add    %al,(%edx)
  79:	00 74 04 3f          	add    %dh,0x3f(%esp,%eax,1)
  7d:	00 00                	add    %al,(%eax)
  7f:	00 41 00             	add    %al,0x0(%ecx)
  82:	00 00                	add    %al,(%eax)
  84:	02 00                	add    (%eax),%al
  86:	74 08                	je     90 <.debug_loc+0x90>
  88:	41                   	inc    %ecx
  89:	00 00                	add    %al,(%eax)

    return ret;
  8b:	00 67 00             	add    %ah,0x0(%edi)
}
  8e:	00 00                	add    %al,(%eax)
  90:	02 00                	add    (%eax),%al
  92:	75 08                	jne    9c <.debug_loc+0x9c>
  94:	67 00 00             	add    %al,(%bx,%si)
  97:	00 68 00             	add    %ch,0x0(%eax)
  9a:	00 00                	add    %al,(%eax)
  9c:	02 00                	add    (%eax),%al
  9e:	74 04                	je     a4 <.debug_loc+0xa4>
	...
  a8:	68 00 00 00 69       	push   $0x69000000
  ad:	00 00                	add    %al,(%eax)
  af:	00 02                	add    %al,(%edx)
  b1:	00 74 04 69          	add    %dh,0x69(%esp,%eax,1)
  b5:	00 00                	add    %al,(%eax)
  b7:	00 6b 00             	add    %ch,0x0(%ebx)
  ba:	00 00                	add    %al,(%eax)
  bc:	02 00                	add    (%eax),%al
  be:	74 08                	je     c8 <.debug_loc+0xc8>
  c0:	6b 00 00             	imul   $0x0,(%eax),%eax
  c3:	00 93 00 00 00 02    	add    %dl,0x2000000(%ebx)
  c9:	00 75 08             	add    %dh,0x8(%ebp)
  cc:	93                   	xchg   %eax,%ebx
  cd:	00 00                	add    %al,(%eax)
  cf:	00 94 00 00 00 02 00 	add    %dl,0x20000(%eax,%eax,1)
  d6:	74 04                	je     dc <.debug_loc+0xdc>
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
/* This file is part of the GLEG engine (GPL v2 or later), see LICENSE.html */

#include "io/asmio.h"

void outb(u8int val, u16int port)
{
   0:	1c 00                	sbb    $0x0,%al
   2:	00 00                	add    %al,(%eax)
   4:	02 00                	add    (%eax),%al
   6:	00 00                	add    %al,(%eax)
			6: R_386_32	.debug_info
   8:	00 00                	add    %al,(%eax)
   a:	04 00                	add    $0x0,%al
	...
			10: R_386_32	.text
    asm("outb %%al, %%dx" : : "a"(val), "d"(port));
  14:	94                   	xchg   %eax,%esp
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
/* This file is part of the GLEG engine (GPL v2 or later), see LICENSE.html */

#include "io/asmio.h"

void outb(u8int val, u16int port)
{
   0:	ad                   	lods   %ds:(%esi),%eax
   1:	00 00                	add    %al,(%eax)
   3:	00 02                	add    %al,(%edx)
   5:	00 89 00 00 00 01    	add    %cl,0x1000000(%ecx)
   b:	01 fb                	add    %edi,%ebx
   d:	0e                   	push   %cs
   e:	0d 00 01 01 01       	or     $0x1010100,%eax
    asm("outb %%al, %%dx" : : "a"(val), "d"(port));
  13:	01 00                	add    %eax,(%eax)
  15:	00 00                	add    %al,(%eax)
  17:	01 00                	add    %eax,(%eax)
  19:	00 01                	add    %al,(%ecx)
  1b:	2f                   	das    
}
  1c:	68 6f 6d 65 2f       	push   $0x2f656d6f

void outw(u16int val, u16int port)
{
  21:	62 6c 65 73          	bound  %ebp,0x73(%ebp,%eiz,2)
  25:	73 65                	jae    8c <.debug_line+0x8c>
  27:	64                   	fs
  28:	2f                   	das    
  29:	50                   	push   %eax
  2a:	72 6f                	jb     9b <.debug_line+0x9b>
  2c:	67 72 61             	addr16 jb 90 <.debug_line+0x90>
  2f:	6d                   	insl   (%dx),%es:(%edi)
  30:	6f                   	outsl  %ds:(%esi),(%dx)
  31:	77 61                	ja     94 <.debug_line+0x94>
    asm("outw %%ax, %%dx" : : "a"(val), "d"(port));
  33:	6e                   	outsb  %ds:(%esi),(%dx)
  34:	69 65 2f 62 6c 65 73 	imul   $0x73656c62,0x2f(%ebp),%esp
  3b:	73 4f                	jae    8c <.debug_line+0x8c>
}
  3d:	53                   	push   %ebx

u8int inb(u16int port)
{
  3e:	2f                   	das    
  3f:	65                   	gs
  40:	78 2f                	js     71 <.debug_line+0x71>
  42:	73 72                	jae    b6 <inw+0x4e>
  44:	63 2f                	arpl   %bp,(%edi)
  46:	69 6f 00 2f 68 6f 6d 	imul   $0x6d6f682f,0x0(%edi),%ebp
    u8int ret;
    asm("inb %%dx, %%al" : "=a"(ret) : "d"(port));
  4d:	65                   	gs
  4e:	2f                   	das    
  4f:	62 6c 65 73          	bound  %ebp,0x73(%ebp,%eiz,2)
  53:	73 65                	jae    ba <inw+0x52>
  55:	64                   	fs
  56:	2f                   	das    
  57:	50                   	push   %eax
  58:	72 6f                	jb     c9 <inw+0x61>
  5a:	67 72 61             	addr16 jb be <inw+0x56>
  5d:	6d                   	insl   (%dx),%es:(%edi)

    return ret;
  5e:	6f                   	outsl  %ds:(%esi),(%dx)
  5f:	77 61                	ja     c2 <inw+0x5a>
  61:	6e                   	outsb  %ds:(%esi),(%dx)
}
  62:	69 65 2f 62 6c 65 73 	imul   $0x73656c62,0x2f(%ebp),%esp

u16int inw(u16int port)
{
  69:	73 4f                	jae    ba <inw+0x52>
  6b:	53                   	push   %ebx
  6c:	2f                   	das    
  6d:	65                   	gs
  6e:	78 2f                	js     9f <.debug_line+0x9f>
  70:	69 6e 63 2f 63 6f 6d 	imul   $0x6d6f632f,0x63(%esi),%ebp
    u16int ret;
    asm("inw %%dx, %%ax" : "=a"(ret) : "d"(port));
  77:	6d                   	insl   (%dx),%es:(%edi)
  78:	6f                   	outsl  %ds:(%esi),(%dx)
  79:	6e                   	outsb  %ds:(%esi),(%dx)
  7a:	00 00                	add    %al,(%eax)
  7c:	61                   	popa   
  7d:	73 6d                	jae    ec <inw+0x84>
  7f:	69 6f 2e 63 00 01 00 	imul   $0x10063,0x2e(%edi),%ebp
  86:	00 74 79 70          	add    %dh,0x70(%ecx,%edi,2)

    return ret;
  8a:	65                   	gs
  8b:	73 2e                	jae    bb <inw+0x53>
  8d:	68 00 02 00 00       	push   $0x200
}
  92:	00 00                	add    %al,(%eax)
  94:	05 02 00 00 00       	add    $0x2,%eax
			96: R_386_32	.text
  99:	00 17                	add    %dl,(%edi)
  9b:	08 2f                	or     %ch,(%edi)
  9d:	91                   	xchg   %eax,%ecx
  9e:	31 08                	xor    %ecx,(%eax)
  a0:	3d 9f 31 d8 08       	cmp    $0x8d8319f,%eax
  a5:	22 4b 69             	and    0x69(%ebx),%cl
  a8:	d8 08                	fmuls  (%eax)
  aa:	3e                   	ds
  ab:	4b                   	dec    %ebx
  ac:	02 06                	add    (%esi),%al
  ae:	00 01                	add    %al,(%ecx)
  b0:	01                   	.byte 0x1

Disassembly of section .debug_str:

00000000 <.debug_str>:
/* This file is part of the GLEG engine (GPL v2 or later), see LICENSE.html */

#include "io/asmio.h"

void outb(u8int val, u16int port)
{
   0:	75 6e                	jne    70 <.debug_str+0x70>
   2:	73 69                	jae    6d <.debug_str+0x6d>
   4:	67 6e                	outsb  %ds:(%si),(%dx)
   6:	65 64 20 69 6e       	gs and %ch,%fs:%gs:0x6e(%ecx)
   b:	74 00                	je     d <.debug_str+0xd>
   d:	75 31                	jne    40 <.debug_str+0x40>
   f:	36 69 6e 74 00 6f 75 	imul   $0x74756f00,%ss:0x74(%esi),%ebp
  16:	74 
    asm("outb %%al, %%dx" : : "a"(val), "d"(port));
  17:	62 00                	bound  %eax,(%eax)
  19:	2f                   	das    
  1a:	68 6f 6d 65 2f       	push   $0x2f656d6f
}

void outw(u16int val, u16int port)
{
  1f:	62 6c 65 73          	bound  %ebp,0x73(%ebp,%eiz,2)
  23:	73 65                	jae    8a <.debug_str+0x8a>
  25:	64                   	fs
  26:	2f                   	das    
  27:	50                   	push   %eax
  28:	72 6f                	jb     99 <inw+0x31>
  2a:	67 72 61             	addr16 jb 8e <.debug_str+0x8e>
  2d:	6d                   	insl   (%dx),%es:(%edi)
  2e:	6f                   	outsl  %ds:(%esi),(%dx)
  2f:	77 61                	ja     92 <inw+0x2a>
  31:	6e                   	outsb  %ds:(%esi),(%dx)
    asm("outw %%ax, %%dx" : : "a"(val), "d"(port));
  32:	69 65 2f 62 6c 65 73 	imul   $0x73656c62,0x2f(%ebp),%esp
  39:	73 4f                	jae    8a <.debug_str+0x8a>
  3b:	53                   	push   %ebx
}
  3c:	2f                   	das    
  3d:	65                   	gs

u8int inb(u16int port)
{
  3e:	78 2f                	js     6f <.debug_str+0x6f>
  40:	73 72                	jae    b4 <inw+0x4c>
  42:	63 2f                	arpl   %bp,(%edi)
  44:	69 6f 2f 61 73 6d 69 	imul   $0x696d7361,0x2f(%edi),%ebp
  4b:	6f                   	outsl  %ds:(%esi),(%dx)
    u8int ret;
    asm("inb %%dx, %%al" : "=a"(ret) : "d"(port));
  4c:	2e 63 00             	arpl   %ax,%cs:(%eax)
  4f:	47                   	inc    %edi
  50:	4e                   	dec    %esi
  51:	55                   	push   %ebp
  52:	20 43 20             	and    %al,0x20(%ebx)
  55:	34 2e                	xor    $0x2e,%al
  57:	37                   	aaa    
  58:	2e 33 00             	xor    %cs:(%eax),%eax
  5b:	6f                   	outsl  %ds:(%esi),(%dx)
  5c:	75 74                	jne    d2 <inw+0x6a>

    return ret;
  5e:	77 00                	ja     60 <.debug_str+0x60>
  60:	73 68                	jae    ca <inw+0x62>
}
  62:	6f                   	outsl  %ds:(%esi),(%dx)
  63:	72 74                	jb     d9 <inw+0x71>
  65:	20 75 6e             	and    %dh,0x6e(%ebp)

u16int inw(u16int port)
{
  68:	73 69                	jae    d3 <inw+0x6b>
  6a:	67 6e                	outsb  %ds:(%si),(%dx)
  6c:	65 64 20 69 6e       	gs and %ch,%fs:%gs:0x6e(%ecx)
  71:	74 00                	je     73 <.debug_str+0x73>
  73:	75 6e                	jne    e3 <inw+0x7b>
  75:	73 69                	jae    e0 <inw+0x78>
    u16int ret;
    asm("inw %%dx, %%ax" : "=a"(ret) : "d"(port));
  77:	67 6e                	outsb  %ds:(%si),(%dx)
  79:	65 64 20 63 68       	gs and %ah,%fs:%gs:0x68(%ebx)
  7e:	61                   	popa   
  7f:	72 00                	jb     81 <.debug_str+0x81>
  81:	70 6f                	jo     f2 <inw+0x8a>
  83:	72 74                	jb     f9 <inw+0x91>
  85:	00 63 68             	add    %ah,0x68(%ebx)
  88:	61                   	popa   
  89:	72 00                	jb     8b <.debug_str+0x8b>

    return ret;
  8b:	75 38                	jne    c5 <inw+0x5d>
  8d:	69                   	.byte 0x69
}
  8e:	6e                   	outsb  %ds:(%esi),(%dx)
  8f:	74 00                	je     91 <inw+0x29>

Disassembly of section .comment:

00000000 <.comment>:
/* This file is part of the GLEG engine (GPL v2 or later), see LICENSE.html */

#include "io/asmio.h"

void outb(u8int val, u16int port)
{
   0:	00 47 43             	add    %al,0x43(%edi)
   3:	43                   	inc    %ebx
   4:	3a 20                	cmp    (%eax),%ah
   6:	28 44 65 62          	sub    %al,0x62(%ebp,%eiz,2)
   a:	69 61 6e 20 34 2e 37 	imul   $0x372e3420,0x6e(%ecx),%esp
  11:	2e 33 2d 34 29 20 34 	xor    %cs:0x34202934,%ebp
    asm("outb %%al, %%dx" : : "a"(val), "d"(port));
  18:	2e                   	cs
  19:	37                   	aaa    
  1a:	2e 33 00             	xor    %cs:(%eax),%eax

Disassembly of section .eh_frame:

00000000 <.eh_frame>:
   0:	14 00                	adc    $0x0,%al
   2:	00 00                	add    %al,(%eax)
   4:	00 00                	add    %al,(%eax)
   6:	00 00                	add    %al,(%eax)
   8:	01 7a 52             	add    %edi,0x52(%edx)
   b:	00 01                	add    %al,(%ecx)
   d:	7c 08                	jl     17 <.eh_frame+0x17>
   f:	01 1b                	add    %ebx,(%ebx)
  11:	0c 04                	or     $0x4,%al
  13:	04 88                	add    $0x88,%al
  15:	01 00                	add    %eax,(%eax)
  17:	00 1c 00             	add    %bl,(%eax,%eax,1)
  1a:	00 00                	add    %al,(%eax)
  1c:	1c 00                	sbb    $0x0,%al
  1e:	00 00                	add    %al,(%eax)
  20:	00 00                	add    %al,(%eax)
			20: R_386_PC32	.text
  22:	00 00                	add    %al,(%eax)
  24:	1e                   	push   %ds
  25:	00 00                	add    %al,(%eax)
  27:	00 00                	add    %al,(%eax)
  29:	41                   	inc    %ecx
  2a:	0e                   	push   %cs
  2b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
  31:	5a                   	pop    %edx
  32:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
  35:	04 00                	add    $0x0,%al
  37:	00 1c 00             	add    %bl,(%eax,%eax,1)
  3a:	00 00                	add    %al,(%eax)
  3c:	3c 00                	cmp    $0x0,%al
  3e:	00 00                	add    %al,(%eax)
  40:	1e                   	push   %ds
			40: R_386_PC32	.text
  41:	00 00                	add    %al,(%eax)
  43:	00 20                	add    %ah,(%eax)
  45:	00 00                	add    %al,(%eax)
  47:	00 00                	add    %al,(%eax)
  49:	41                   	inc    %ecx
  4a:	0e                   	push   %cs
  4b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
  51:	5c                   	pop    %esp
  52:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
  55:	04 00                	add    $0x0,%al
  57:	00 20                	add    %ah,(%eax)
  59:	00 00                	add    %al,(%eax)
  5b:	00 5c 00 00          	add    %bl,0x0(%eax,%eax,1)
  5f:	00 3e                	add    %bh,(%esi)
			60: R_386_PC32	.text
  61:	00 00                	add    %al,(%eax)
  63:	00 2a                	add    %ch,(%edx)
  65:	00 00                	add    %al,(%eax)
  67:	00 00                	add    %al,(%eax)
  69:	41                   	inc    %ecx
  6a:	0e                   	push   %cs
  6b:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
  71:	44                   	inc    %esp
  72:	83 03 61             	addl   $0x61,(%ebx)
  75:	c3                   	ret    
  76:	41                   	inc    %ecx
  77:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
  7a:	04 00                	add    $0x0,%al
  7c:	20 00                	and    %al,(%eax)
  7e:	00 00                	add    %al,(%eax)
  80:	80 00 00             	addb   $0x0,(%eax)
  83:	00 68 00             	add    %ch,0x0(%eax)
			84: R_386_PC32	.text
  86:	00 00                	add    %al,(%eax)
  88:	2c 00                	sub    $0x0,%al
  8a:	00 00                	add    %al,(%eax)
  8c:	00 41 0e             	add    %al,0xe(%ecx)
  8f:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
  95:	44                   	inc    %esp
  96:	83 03 63             	addl   $0x63,(%ebx)
  99:	c3                   	ret    
  9a:	41                   	inc    %ecx
  9b:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
  9e:	04 00                	add    $0x0,%al
